// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     message_header.avsc
 */
package example

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type MessageHeader struct {

	
	
		MessageId string
	

	
	
		CorrelationId string
	

	
	
		ReturnAddress string
	

	
	
		MessageType int32
	

	
	
		MessageFlags int32
	

}

func NewMessageHeader() (*MessageHeader) {
	return &MessageHeader{}
}

func DeserializeMessageHeader(r io.Reader) (*MessageHeader, error) {
	t := NewMessageHeader()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeMessageHeaderFromSchema(r io.Reader, schema string) (*MessageHeader, error) {
	t := NewMessageHeader()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeMessageHeader(r *MessageHeader, w io.Writer) error {
	var err error
	
	err = vm.WriteString( r.MessageId, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.CorrelationId, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.ReturnAddress, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteInt( r.MessageType, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteInt( r.MessageFlags, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *MessageHeader) Serialize(w io.Writer) error {
	return writeMessageHeader(r, w)
}

func (r *MessageHeader) Schema() string {
	return "{\"fields\":[{\"name\":\"messageId\",\"type\":\"string\"},{\"name\":\"correlationId\",\"type\":\"string\"},{\"name\":\"returnAddress\",\"type\":\"string\"},{\"name\":\"messageType\",\"type\":\"int\"},{\"name\":\"messageFlags\",\"type\":\"int\"}],\"name\":\"kata.MessageHeader\",\"type\":\"record\"}"
}

func (r *MessageHeader) SchemaName() string {
	return "kata.MessageHeader"
}

func (_ *MessageHeader) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *MessageHeader) SetInt(v int32) { panic("Unsupported operation") }
func (_ *MessageHeader) SetLong(v int64) { panic("Unsupported operation") }
func (_ *MessageHeader) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *MessageHeader) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *MessageHeader) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *MessageHeader) SetString(v string) { panic("Unsupported operation") }
func (_ *MessageHeader) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MessageHeader) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.String)(&r.MessageId)
		
	
	case 1:
		
		
			return (*types.String)(&r.CorrelationId)
		
	
	case 2:
		
		
			return (*types.String)(&r.ReturnAddress)
		
	
	case 3:
		
		
			return (*types.Int)(&r.MessageType)
		
	
	case 4:
		
		
			return (*types.Int)(&r.MessageFlags)
		
	
	}
	panic("Unknown field index")
}

func (r *MessageHeader) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *MessageHeader) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MessageHeader) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *MessageHeader) Finalize() { }
